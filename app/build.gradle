plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.android.application'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id "com.guardsquare.appsweep" version "$appsweep_version"
    id "com.google.protobuf" version "$protobuf_plugin_version"
}

android {
    compileSdk compile_sdk_version

    defaultConfig {
        applicationId "gq.kirmanak.mealient"
        minSdk min_sdk_version
        targetSdk target_sdk_version
        versionCode 13
        versionName "0.2.4"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField "Boolean", "LOG_NETWORK", "false"
    }

    signingConfigs {
        release {
            rootProject.file("keystore.properties").with { keystorePropertiesFile ->
                if (keystorePropertiesFile.canRead()) {
                    def keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                } else {
                    println 'Unable to read keystore.properties'
                }
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
        }
    }

    lint {
        disable 'ObsoleteLintCustomCheck', 'IconMissingDensityFolder'
        enable 'ConvertToWebp', 'DuplicateStrings', 'EasterEgg', 'ExpensiveAssertion', 'IconExpectedSize', 'ImplicitSamInstance', 'InvalidPackage', 'KotlinPropertyAccess', 'LambdaLast', 'MinSdkTooLow', 'NegativeMargin', 'NoHardKeywords', 'Registered', 'RequiredSize', 'UnknownNullness', 'WrongThreadInterprocedural'
    }

    namespace 'gq.kirmanak.mealient'

    packagingOptions {
        resources.excludes += "DebugProbesKt.bin"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
}

dependencies {
    implementation "com.google.android.material:material:$material_version"

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-runtime-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation "androidx.core:core-ktx:$core_ktx_version"

    implementation "androidx.appcompat:appcompat:$appcompat_version"

    implementation "androidx.constraintlayout:constraintlayout:$contraint_layout_version"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout_version"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$retrofit_kotlinx_serialization_version"

    implementation platform("com.squareup.okhttp3:okhttp-bom:$okhttp_version")
    implementation "com.squareup.okhttp3:okhttp"
    debugImplementation "com.squareup.okhttp3:logging-interceptor"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx_datetime_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    implementation("com.github.bumptech.glide:recyclerview-integration:$glide_version") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "com.github.kirich1409:viewbindingpropertydelegate-noreflection:$view_binding_delegate_version"

    implementation "androidx.datastore:datastore-preferences:$datastore_version"
    implementation "androidx.datastore:datastore:$datastore_version"

    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"

    implementation "androidx.security:security-crypto:$security_version"

    implementation platform("com.google.firebase:firebase-bom:$firebase_version")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-crashlytics-ktx"

    testImplementation "junit:junit:$junit_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    testImplementation "org.robolectric:robolectric:$robolectric_version"

    testImplementation "androidx.test.ext:junit-ktx:$junit_ktx_version"

    testImplementation "com.google.truth:truth:$truth_version"

    testImplementation "io.mockk:mockk:$mockk_version"

    debugImplementation "com.facebook.flipper:flipper:$flipper_version"
    debugImplementation "com.facebook.flipper:flipper-leakcanary2-plugin:$flipper_version"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:$flipper_version"

    debugImplementation "com.facebook.soloader:soloader:$soloader_version"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"

    // https://github.com/ChuckerTeam/chucker/releases
    debugImplementation "com.github.chuckerteam.chucker:library:$chucker_version"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}